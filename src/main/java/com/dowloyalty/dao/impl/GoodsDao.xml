<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dowloyalty.dao.GoodsDao">
	
	<insert id="save" parameterType="com.dowloyalty.entity.Goods">
	insert into goods
	(
		Name,Description,ImagePath,
		IsActive
	)
	values
	(
		#{Name},#{Description},#{ImagePath},
		#{IsActive}
	)
	</insert>
	
	<delete id="delete" parameterType="int">
		delete from goods where ID = #{ID}
	</delete>
	
	<update id="update" parameterType="com.dowloyalty.entity.Goods">
	update goods set
	Name = #{name},Description = #{description},ImagePath = #{imagePath},
	IsActive = #{isActive}
	where ID = #{id}
	</update>
	
	<select id="findAll" resultType="com.dowloyalty.entity.Goods">
	select
		ID,Name,Description,ImagePath,
		IsActive
	from goods
	where
	IsActive = 1
	</select>
	
	<resultMap type="com.dowloyalty.pojo.GoodsVo" id="pointsMap">
		<id column="goodsid" property="id"/>
		<result column="exchangepoints" property="exchangePoints"/>
		<association property="goods" javaType="com.dowloyalty.entity.Goods">
			<id column="goodsid" property="id"/>
			<result column="goodsname" property="name"/>
			<result column="goodsip" property="imagePath"/>
			<result column="description" property="description"/>
		</association>
	</resultMap>
	
	
	<select id="findByRetailerId" parameterType="int" resultMap="pointsMap">
	select 
		goods.ID goodsid,
		goods.Name goodsname,
		goods.ImagePath goodsip,
		goods.Description description,
		exchangeshop.ExchangePoints exchangepoints
	from 
		goods
	right join 
		exchangeshop
	on 
		goods.ID = exchangeshop.GoodsID
	where 
		exchangeshop.ProjectID =
		(
			select
				project.ID
			from 
				project	
			left join 
			rprojectretailer
			on 
			project.ID = rprojectretailer.ProjectID
			where
				rprojectretailer.RetailerID = #{RetailerID}
			and
				project.StartDate &lt;= current_date()
			and
				project.EndDate >= current_date()
			and 
				project.IsActive = 1
			and 
				rprojectretailer.IsActive = 1
			order by project.StartDate desc 
				limit 0,1
		)
	and
		goods.IsActive = 1
	and
		exchangeshop.IsActive = 1
	</select>
	
	<select id = "findByGoodsId" resultMap="pointsMap">
	select
		goods.ID goodsid,
		goods.Name goodsname,
		goods.ImagePath goodsip,
		goods.Description description,
		exchangeshop.ExchangePoints exchangepoints
	from goods
	left join exchangeshop
	on goods.ID = exchangeshop.GoodsID
	where 
	exchangeshop.ProjectID =
		(
			select
				project.ID
			from 
				project	
			left join 
			rprojectretailer
			on 
			project.ID = rprojectretailer.ProjectID
			where
				rprojectretailer.RetailerID = #{RetailerID}
			and
				project.StartDate &lt;= current_date()
			and
				project.EndDate >= current_date()
			and 
				project.IsActive = 1
			and 
				rprojectretailer.IsActive = 1
			order by project.StartDate desc 
				limit 0,1
		)
	and
	goods.ID = #{GoodsID}
	and
	goods.IsActive = 1
	and
	exchangeshop.IsActive = 1
	</select>
	
	<select id = "findByProvinceId" parameterType="int" resultMap="pointsMap">
	select
		goods.ID goodsid,
		goods.Name goodsname,
		goods.ImagePath goodsip,
		goods.Description description,
		exchangeshop.ExchangePoints exchangepoints
	from exchangeshop
	right join goods
	on exchangeshop.GoodsID = goods.ID
	right join project
	on exchangeshop.projectID = project.ID
	where project.ProvinceID = #{ID}
	and
	goods.IsActive = 1
	and
	project.IsActive = 1
	and
	exchangeshop.IsActive = 1
	</select>
	
	<select id = "getGoodsAmount" resultType="int">
	select
		count(*)
	from goods
	where
	goods.IsActive = 1
	</select>
	
	<select id = "findById" parameterType="int" resultType="com.dowloyalty.entity.Goods">
	select
		ID,Name,Description,ImagePath,
		IsActive
	from goods
	where ID = #{ID}
	and
	goods.IsActive = 1
	</select>
	
	<insert id="batchGoodsInfo">
	    insert into
	      goods(Name,Description,ImagePath,IsActive)
	    values
	    <foreach collection="goodsList" item="goods" separator=",">
	      (#{goods.name},#{goods.description},#{goods.imagePath},#{goods.isActive})
	    </foreach>
	</insert>
</mapper>

